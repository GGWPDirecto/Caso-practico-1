pipeline {
    agent none  // No se asigna un agente global para que cada etapa use su propio agente

    stages { 

        stage('GetCode') {
            agent { label 'master' } // Usamos el agente principal para obtener el código
            steps {
               git'https://github.com/GiovannaLeon/helloworld.git'
              // stash name: 'source', useDefaultExcludes: false  // 
              // stash name: 'config', includes: 'config/**', useDefaultExcludes: false  // Almacenamos los archivos del directorio 'config'
            }
        }

        stage('Start WireMock') {
            agent { label 'agente-secundario-1' }  // Usamos el primer agente secundario para levantar WireMock
            steps {
                script {
                    echo 'Levantando WireMock...'
                    bat '''
                        start java -jar "C:\\Users\\amaro\\Documents\\Giovanna\\helloworld\\test\\wiremock-standalone-3.10.0.jar" --port 9090 
                    '''
                    sleep(5) // Esperar 5 segundos para asegurar que WireMock esté corriendo
                }
            }
        }

        stage('Build') {
            agent { label 'master' } // Usamos el agente principal para la etapa de build
            steps {
                //unstash 'source'  // Recuperamos el código almacenado
                //unstash 'config'  // Recuperamos los archivos de configuración almacenados
                echo 'No hay que hacer nada. Esto es Python'
                bat "dir"
            }
        }

        stage('Tests') { 
            parallel {

                stage('Unit') {
                    agent { label 'agente-secundario-2' } // Usamos el segundo agente para las pruebas unitarias
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') { 
                            //unstash 'source'  // Recuperamos el código almacenado
                            //unstash 'config'  // Recuperamos los archivos de configuración almacenados
                            bat '''
                                set PYTHONPATH=%WORKSPACE%
                                C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m pytest --junitxml=result-unit.xml test\\unit
                                echo 'python...'
                            ''' 
                        } 
                    }
                }

                stage('Rest') {
                    agent { label 'agente-secundario-1' } // Usamos el primer agente para las pruebas REST
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') { 
                            //unstash 'source'  // Recuperamos el código almacenado
                            //unstash 'config'  // Recuperamos los archivos de configuración almacenados
                            bat '''
                                set FLASK_APP=app\\api.py
                                start /B C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m flask run --host=0.0.0.0 --port=5000
                                set PYTHONPATH=%WORKSPACE%
                                start C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m pytest --junitxml=result-rest.xml %WORKSPACE%\\test\\rest
                                echo 'Flask...'
                            ''' 
                        }
                    }
                }
            }
        }

        stage('Stop WireMock') {
            agent { label 'agente-secundario-1' } // Detenemos WireMock en el primer agente
            steps {
                script {
                    echo 'Deteniendo WireMock...'
                    // Aquí puedes agregar el comando para detener WireMock si es necesario
                    //bat '''
                    //    taskkill /F /IM java.exe
                    //'''
                }
            }
        }
         
        
        stage('Results') {
            agent { label 'master' }  // Usamos el agente principal para recoger los resultados
            steps {
                junit 'result*.xml'  // Buscar archivos de resultados en cualquier subdirectorio
            }
        }
         
         stage('Clean Workspace') {
            agent { label 'master' }  // Usamos el agente principal para recoger los resultados
            steps {
                script {
                    deleteDir() // Elimina todo el contenido del workspace
                }
            }
        }   
    }
}        