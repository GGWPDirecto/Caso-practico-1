pipeline {
    agent { label 'Agente1' }
    
    stages {
        stage('Get Code') {
            steps {
                git 'https://github.com/GGWPDirecto/Caso-practico-1.git'
                stash name: 'source-code', includes: '**/*'
            }
        }
        
        stage('Unit Test') {
            steps {
                unstash 'source-code'
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-unit.xml test\\unit
                '''
                junit 'result-unit.xml'
            }
        }
        
        stage('Rest') {
            steps {
                unstash 'source-code'
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start /B flask run
                    timeout /T 5
                    set PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-rest.xml test\\rest || exit 0
                '''
                junit 'result-rest.xml'
            }
        }
        
        stage('Coverage') {
            steps {
                unstash 'source-code'
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    coverage run -m pytest
                    coverage xml -o coverage.xml
                '''
                recordCoverage(
                    tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                    qualityGates: [
                        [threshold: 95.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'UNSTABLE'],
                        [threshold: 85.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'FAILURE'],
                        [threshold: 90.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'UNSTABLE'],
                        [threshold: 80.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'FAILURE']
                    ]
                )
            }
        }
        
        stage('Static Analysis') {
            steps {
                unstash 'source-code'
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    flake8 app/ --format=pylint > flake8-report.txt || exit 0
                '''
                recordIssues(tools: [flake8(pattern: 'flake8-report.txt')])
                script {
                    def warnings = readFile('flake8-report.txt').readLines().findAll { it.trim() }
                    if (warnings.size() >= 10) {
                        currentBuild.result = 'FAILURE'
                    } else if (warnings.size() >= 8) {
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Security') {
            steps {
                unstash 'source-code'
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    bandit -r app/ -f json -o bandit-report.json || exit 0
                '''
                script {
                    def banditResults = readJSON file: 'bandit-report.json'
                    if (banditResults.results.size() >= 4) {
                        currentBuild.result = 'FAILURE'
                    } else if (banditResults.results.size() >= 2) {
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Performance') {
            steps {
                unstash 'source-code'
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    start /B flask run
                    timeout /T 5
                    C:\\Jenkins_Agente1\\Jenkins\\workspace\\tools\\apache-jmeter-5.6.3\\bin\\jmeter.bat -n -t test\\jmeter\\flask2.jmx -l test\\jmeter\\resultados.jtl
                '''
                perfReport sourceDataFiles: 'test/jmeter/resultados.jtl'
            }
        }
    }
}
