pipeline {
    agent none  // No se asigna un agente global para que cada etapa use su propio agente

    environment {
        WIREMOCK_PORT = '9090'  // Puerto en el que se levantará WireMock
        WIREMOCK_JAR = 'wiremock-standalone-3.10.0.jar'  // Versión de WireMock que se usará
        WIREMOCK_DIR = 'C:\\Users\\amaro\\Documents\\Giovanna\\helloworld\\test'
    }

    stages { 

        stage('GetCode') {
            agent { label 'master' } // Usamos el agente principal para obtener el código
            steps {
                // Especificar que se obtendrá la rama 'develop'
                git branch: 'develop', url: 'https://github.com/GiovannaLeon/helloworld.git'
            }
        }

        stage('Build') {
            agent { label 'master' } // Usamos el agente principal para la etapa de build
            steps {
                echo 'No hay que hacer nada. Esto es Python'
                bat "dir"
            }
        }

        stage('Tests') { 
            parallel {

                stage('Unit') {
                    agent { label 'agente-secundario-2' } // Usamos el segundo agente para las pruebas unitarias
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') { 
                            bat '''
                                set PYTHONPATH=%WORKSPACE%
                                C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m pytest --junitxml=result-unit.xml test\\unit
                                echo 'python...'
                            ''' 
                        } 
                    }
                }

                stage('Integration') {
                    agent { label 'agente-secundario-2' } // Usamos el segundo agente para las pruebas de integración
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') { 
                            script {
                                // Levantar WireMock dentro de la etapa de integración
                                echo 'Levantando WireMock para pruebas de integración...'
                                bat '''
                                    start java -jar "%WIREMOCK_DIR%\\%WIREMOCK_JAR%" --port %WIREMOCK_PORT%
                                    timeout /t 5 /nobreak  // Esperar 5 segundos para asegurar que WireMock esté corriendo
                                '''
                                
                                // Ejecutar las pruebas de integración
                                echo 'Iniciando Flask para pruebas de integración...'
                                bat '''
                                    set FLASK_APP=app\\api.py
                                    start /B C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m flask run --host=0.0.0.0 --port=5000
                                    timeout /t 5 /nobreak  // Esperar 5 segundos para asegurar que Flask esté corriendo
                                '''
                                
                                bat '''
                                    set PYTHONPATH=%WORKSPACE%
                                    start C:\\Users\\amaro\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m pytest --junitxml=result-rest.xml C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\PROYECTOS\\test3\\test\\rest
                                    echo 'Ejecutando pruebas REST...'
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Stop WireMock') {
            agent { label 'agente-secundario-1' } // Detenemos WireMock en el primer agente
            steps {
                script {
                    echo 'Deteniendo WireMock...'
                    bat '''
                        taskkill /F /IM java.exe
                    '''
                }
            }
        }

        stage('Results') {
            agent { label 'master' }  // Usamos el agente principal para recoger los resultados
            steps {
                junit 'result*.xml'  // Buscar archivos de resultados en cualquier subdirectorio
            }
        }

        stage('Clean Workspace') {
            agent { label 'master' }  // Usamos el agente principal para limpiar el workspace
            steps {
                script {
                    deleteDir() // Elimina todo el contenido del workspace
                }
            }
        }
    }
}
